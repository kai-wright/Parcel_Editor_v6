import { parcelResource, parcelStructure, parcelResearch, parcelUnique, parcelInteraction } from "./parcelResource.ts";
function randomInRange(min: number, max: number) {
	return min + Math.floor((max - min) * Math.random());
}

type exampleInteractions = [parcelInteraction,parcelInteraction,parcelInteraction,parcelInteraction]

function generateExampleInteraction() :parcelInteraction {
	return {
		unlocked: false,
		result: [["resource:example",randomInRange(3,6),100]],
		tier: randomInRange(0,5),
		consumes: [["resource:example",randomInRange(1,3),randomInRange(80,100)]],
		requires: ["research:example","structure:example"]
	}
}
export function generateExampleParcels(): [parcelResource, parcelStructure, parcelResearch, parcelUnique] {


	let exampleResource = new parcelResource(
		"example",
		"Example Resource",
		false,
		randomInRange(1, 10),
		{ current: randomInRange(1, 100), last: randomInRange(1, 100), min: 1, max: 100, variance: randomInRange(1, 100) },
		[generateExampleInteraction()],
		[generateExampleInteraction()],
		[generateExampleInteraction()],
		[generateExampleInteraction()]
	);
	let exampleStructure = new parcelStructure(
		"example",
		"Example Structure",
		false,
		randomInRange(1, 10),
		{ current: randomInRange(1, 100), last: randomInRange(1, 100), min: 1, max: 100, variance: randomInRange(1, 100) },
		{ bases: [], amplifiers: [], baseCharge: randomInRange(1, 5), currentCharge: 5 },
		[generateExampleInteraction()],
		[generateExampleInteraction()],
		[generateExampleInteraction()],
		[generateExampleInteraction()]
	);
	let exampleResearch = new parcelResearch("example", "Example Structure", false, [generateExampleInteraction()]);
	let exampleUnique = new parcelUnique("example", "Example Unique Existence", false);
	return [exampleResource, exampleStructure, exampleResearch, exampleUnique];
}
export function logExampleParcels() {
	console.table(generateExampleParcels());
}

export default { generateExampleParcels };
